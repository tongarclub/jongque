import { NextRequest, NextResponse } from 'next/server';
import { lineNotificationService } from '@/lib/notifications/line';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// POST /api/notifications/line/webhook - LINE webhook endpoint
export async function POST(req: NextRequest) {
  try {
    const signature = req.headers.get('x-line-signature');
    if (!signature) {
      return NextResponse.json({ error: 'Missing signature' }, { status: 401 });
    }

    const body = await req.text();
    
    // Verify LINE signature
    if (!lineNotificationService.verifySignature(body, signature)) {
      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });
    }

    const data = JSON.parse(body);
    
    // Process LINE webhook events
    if (data.events && Array.isArray(data.events)) {
      for (const event of data.events) {
        await processLineEvent(event);
      }
    }

    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('LINE webhook error:', error);
    return NextResponse.json(
      { error: 'Webhook processing failed' },
      { status: 500 }
    );
  }
}

// Process individual LINE event
async function processLineEvent(event: any) {
  try {
    const { type, source, message, replyToken } = event;
    const userId = source?.userId;

    if (!userId) return;

    switch (type) {
      case 'message':
        await handleMessage(userId, message, replyToken);
        break;
        
      case 'follow':
        await handleFollow(userId);
        break;
        
      case 'unfollow':
        await handleUnfollow(userId);
        break;
        
      default:
        console.log('Unhandled LINE event type:', type);
    }

  } catch (error) {
    console.error('Error processing LINE event:', error);
  }
}

// Handle incoming message
async function handleMessage(userId: string, message: any, replyToken: string) {
  try {
    if (message.type === 'text') {
      const text = message.text.toLowerCase();

      // Handle specific commands
      if (text.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') || text.includes('status')) {
        await handleStatusInquiry(userId, replyToken);
      } else if (text.includes('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') || text.includes('cancel')) {
        await handleCancellationRequest(userId, replyToken);
      } else if (text.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') || text.includes('help')) {
        await handleHelp(userId, replyToken);
      } else {
        // Default response
        await lineNotificationService.sendTextMessage(
          userId,
          '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ JongQue ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå\n\n‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'
        );
      }
    }
  } catch (error) {
    console.error('Error handling message:', error);
  }
}

// Handle new follower
async function handleFollow(userId: string) {
  try {
    // Get user profile
    const profile = await lineNotificationService.getUserProfile(userId);
    
    // Store LINE user information
    await prisma.user.upsert({
      where: { lineUserId: userId },
      update: { 
        lineUserId: userId,
        lineDisplayName: profile?.displayName,
        linePictureUrl: profile?.pictureUrl,
        updatedAt: new Date()
      },
      create: {
        lineUserId: userId,
        lineDisplayName: profile?.displayName || 'LINE User',
        linePictureUrl: profile?.pictureUrl,
        email: '', // Will be updated when user registers
        name: profile?.displayName || 'LINE User',
        role: 'CUSTOMER'
      }
    });

    // Send welcome message
    await lineNotificationService.sendTextMessage(
      userId,
      `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${profile?.displayName || '‡∏ó‡πà‡∏≤‡∏ô'}! üéâ\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° JongQue ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n\nJongQue ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô\n\nüí° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
    );

  } catch (error) {
    console.error('Error handling follow:', error);
  }
}

// Handle unfollower
async function handleUnfollow(userId: string) {
  try {
    // Update user record to indicate they unfollowed
    await prisma.user.updateMany({
      where: { lineUserId: userId },
      data: { 
        lineUserId: null,
        updatedAt: new Date()
      }
    });

  } catch (error) {
    console.error('Error handling unfollow:', error);
  }
}

// Handle status inquiry
async function handleStatusInquiry(userId: string, replyToken: string) {
  try {
    // Find user's active bookings
    const user = await prisma.user.findFirst({
      where: { lineUserId: userId }
    });

    if (!user) {
      await lineNotificationService.sendTextMessage(
        userId,
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞\n\nüåê ' + (process.env.NEXTAUTH_URL || 'https://jongque.app')
      );
      return;
    }

    const activeBookings = await prisma.booking.findMany({
      where: {
        customerId: user.id,
        status: { in: ['CONFIRMED', 'IN_PROGRESS'] },
        bookingDate: {
          gte: new Date()
        }
      },
      include: {
        service: { select: { name: true } },
        business: { select: { name: true } },
        staff: { select: { name: true } }
      },
      orderBy: { bookingDate: 'asc' },
      take: 3
    });

    if (activeBookings.length === 0) {
      await lineNotificationService.sendTextMessage(
        userId,
        '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ\n\nüìÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ' + (process.env.NEXTAUTH_URL || 'https://jongque.app') + '/book'
      );
    } else {
      let message = 'üìã ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n\n';
      
      activeBookings.forEach((booking, index) => {
        message += `${index + 1}. üé´ ${booking.bookingNumber}\n`;
        message += `   üè™ ${booking.business?.name}\n`;
        message += `   üíÑ ${booking.service?.name}\n`;
        message += `   üìÖ ${new Date(booking.bookingDate).toLocaleDateString('th-TH')}\n`;
        message += `   ‚è∞ ${booking.timeSlot}\n`;
        message += `   üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${getStatusText(booking.status)}\n\n`;
      });

      await lineNotificationService.sendTextMessage(userId, message.trim());
    }

  } catch (error) {
    console.error('Error handling status inquiry:', error);
  }
}

// Handle cancellation request
async function handleCancellationRequest(userId: string, replyToken: string) {
  await lineNotificationService.sendTextMessage(
    userId,
    '‚ùå ‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:\n\nüåê ' + (process.env.NEXTAUTH_URL || 'https://jongque.app') + '/my-bookings\n\n‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á'
  );
}

// Handle help request
async function handleHelp(userId: string, replyToken: string) {
  const helpMessage = `üÜò ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô JongQue LINE Bot\n\n` +
    `üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n` +
    `‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n` +
    `‚Ä¢ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" - ‡∏Ç‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á\n` +
    `‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\n` +
    `üåê ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: ${process.env.NEXTAUTH_URL || 'https://jongque.app'}\n\n` +
    `üí° Tips: ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏¥‡∏ß ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô LINE ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥`;

  await lineNotificationService.sendTextMessage(userId, helpMessage);
}

// Helper function to get status text in Thai
function getStatusText(status: string): string {
  const statusMap: { [key: string]: string } = {
    'PENDING': '‡∏£‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
    'CONFIRMED': '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
    'IN_PROGRESS': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
    'COMPLETED': '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    'CANCELLED': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
    'NO_SHOW': '‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î'
  };
  return statusMap[status] || status;
}
