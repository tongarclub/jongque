#!/usr/bin/env node

/**
 * Deploy Database to Production Script
 * Usage: PRODUCTION_DATABASE_URL="your-url" node scripts/deploy-to-production.js
 */

const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

async function deployToProduction() {
  const productionUrl = process.env.PRODUCTION_DATABASE_URL
  
  if (!productionUrl) {
    console.log('‚ùå PRODUCTION_DATABASE_URL is required')
    console.log('')
    console.log('Usage:')
    console.log('PRODUCTION_DATABASE_URL="postgresql://user:pass@host:port/db" node scripts/deploy-to-production.js')
    console.log('')
    console.log('Or set it in your environment:')
    console.log('export PRODUCTION_DATABASE_URL="postgresql://user:pass@host:port/db"')
    process.exit(1)
  }
  
  console.log('üöÄ PRODUCTION DATABASE DEPLOYMENT')
  console.log('==================================')
  console.log('')
  console.log('üîó Target Database:', productionUrl.replace(/:[^:@]*@/, ':****@'))
  console.log('')
  
  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: productionUrl
      }
    }
  })
  
  try {
    console.log('üîÑ Step 1: Testing connection...')
    await prisma.$connect()
    console.log('‚úÖ Connection successful')
    
    console.log('')
    console.log('üîÑ Step 2: Adding password column if missing...')
    
    // Check if password column exists
    try {
      await prisma.$queryRaw`SELECT password FROM "User" LIMIT 1`
      console.log('‚úÖ Password column already exists')
    } catch (error) {
      if (error.message.includes('column "password" does not exist')) {
        console.log('üîß Adding password column...')
        await prisma.$executeRaw`ALTER TABLE "User" ADD COLUMN "password" TEXT`
        console.log('‚úÖ Password column added')
      } else {
        throw error
      }
    }
    
    console.log('')
    console.log('üîÑ Step 3: Clearing existing data...')
    
    // Clear data in correct order
    await prisma.booking.deleteMany()
    console.log('   ‚úÖ Cleared bookings')
    
    await prisma.operatingHours.deleteMany()
    console.log('   ‚úÖ Cleared operating hours')
    
    await prisma.subscription.deleteMany()
    console.log('   ‚úÖ Cleared subscriptions')
    
    await prisma.business.deleteMany()
    console.log('   ‚úÖ Cleared businesses')
    
    await prisma.account.deleteMany()
    console.log('   ‚úÖ Cleared accounts')
    
    await prisma.session.deleteMany()
    console.log('   ‚úÖ Cleared sessions')
    
    await prisma.user.deleteMany()
    console.log('   ‚úÖ Cleared users')
    
    console.log('')
    console.log('üîÑ Step 4: Creating admin user...')
    
    const adminPassword = await bcrypt.hash('admin123', 12)
    const admin = await prisma.user.create({
      data: {
        email: 'admin@jongque.com',
        name: 'System Administrator',
        password: adminPassword,
        role: 'ADMIN',
        isVerified: true,
      },
    })
    console.log('   ‚úÖ Admin user created:', admin.email)
    
    console.log('')
    console.log('üîÑ Step 5: Creating business owner...')
    
    const ownerPassword = await bcrypt.hash('owner123', 12)
    const businessOwner = await prisma.user.create({
      data: {
        email: 'owner@jongque.com',
        name: 'Business Owner',
        password: ownerPassword,
        role: 'BUSINESS_OWNER',
        isVerified: true,
      },
    })
    console.log('   ‚úÖ Business owner created:', businessOwner.email)
    
    console.log('')
    console.log('üîÑ Step 6: Creating sample business...')
    
    const business = await prisma.business.create({
      data: {
        id: 'sample-business-1',
        name: 'JongQue Demo Restaurant',
        description: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß',
        phone: '02-123-4567',
        address: '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110',
        ownerId: businessOwner.id,
        isActive: true,
      },
    })
    console.log('   ‚úÖ Sample business created:', business.name)
    
    console.log('')
    console.log('üîÑ Step 7: Creating operating hours...')
    
    const daysOfWeek = [
      { day: 'MONDAY', open: '09:00', close: '22:00' },
      { day: 'TUESDAY', open: '09:00', close: '22:00' },
      { day: 'WEDNESDAY', open: '09:00', close: '22:00' },
      { day: 'THURSDAY', open: '09:00', close: '22:00' },
      { day: 'FRIDAY', open: '09:00', close: '23:00' },
      { day: 'SATURDAY', open: '10:00', close: '23:00' },
      { day: 'SUNDAY', open: '10:00', close: '21:00' },
    ]
    
    for (const schedule of daysOfWeek) {
      await prisma.operatingHours.create({
        data: {
          businessId: business.id,
          dayOfWeek: schedule.day,
          openTime: schedule.open,
          closeTime: schedule.close,
          isOpen: true,
        },
      })
    }
    console.log('   ‚úÖ Operating hours created for all days')
    
    console.log('')
    console.log('üîÑ Step 8: Creating subscription...')
    
    await prisma.subscription.create({
      data: {
        businessId: business.id,
        tier: 'BASIC',
        status: 'ACTIVE',
        currentPeriodStart: new Date(),
        currentPeriodEnd: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year
      },
    })
    console.log('   ‚úÖ Subscription created')
    
    console.log('')
    console.log('üîÑ Step 9: Creating sample customers...')
    
    const customers = [
      { email: 'customer1@example.com', name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1', phone: '081-111-1111' },
      { email: 'customer2@example.com', name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2', phone: '081-222-2222' },
    ]
    
    for (const customerData of customers) {
      await prisma.user.create({
        data: {
          email: customerData.email,
          name: customerData.name,
          phone: customerData.phone,
          role: 'CUSTOMER',
          isVerified: true,
        },
      })
    }
    console.log('   ‚úÖ Sample customers created')
    
    // Final count
    const userCount = await prisma.user.count()
    const businessCount = await prisma.business.count()
    
    console.log('')
    console.log('üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!')
    console.log('=====================================')
    console.log('')
    console.log('üìä Database Summary:')
    console.log(`   - Users: ${userCount}`)
    console.log(`   - Businesses: ${businessCount}`)
    console.log('')
    console.log('üîë Login Credentials:')
    console.log('   Admin:')
    console.log('     Email: admin@jongque.com')
    console.log('     Password: admin123')
    console.log('')
    console.log('   Business Owner:')
    console.log('     Email: owner@jongque.com')
    console.log('     Password: owner123')
    console.log('')
    console.log('üîó Test login at: https://jongque.vercel.app/signin')
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error.message)
    
    if (error.code === 'P1001') {
      console.log('üí° Database connection failed. Check your PRODUCTION_DATABASE_URL')
    } else if (error.code === 'P2002') {
      console.log('üí° Unique constraint error. Data might already exist.')
    }
    
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

deployToProduction().catch(console.error)
