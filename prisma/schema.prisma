// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  phone     String?  @unique
  name      String?
  image     String?
  password  String?  // For credentials authentication
  role      UserRole @default(CUSTOMER)
  isVerified Boolean @default(false) // Email verification
  isPhoneVerified Boolean @default(false) // Phone verification
  
  // LINE Integration
  lineUserId    String?   @unique
  lineDisplayName String?
  linePictureUrl String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth providers
  accounts Account[]
  sessions Session[]

  // Customer relationships
  bookings  Booking[]
  waitlist  Waitlist[]
  
  // Business owner relationships
  business  Business?
  
  // Notification relationships
  sentNotifications Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationRecipient")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model OtpVerification {
  id          String   @id @default(cuid())
  phone       String
  otpCode     String
  attempts    Int      @default(0)
  isVerified  Boolean  @default(false)
  isUsed      Boolean  @default(false)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([phone])
  @@index([otpCode])
  @@map("otp_verifications")
}

// Business Management
model Business {
  id          String   @id @default(cuid())
  name        String
  description String?
  phone       String?
  email       String?
  address     String?
  subdomain   String?  @unique
  customDomain String? @unique
  
  // Branding & Customization
  logo        String?
  coverImage  String?
  primaryColor String @default("#3b82f6")
  secondaryColor String @default("#f3f4f6")
  accentColor String @default("#10b981") // Green accent
  backgroundColor String @default("#ffffff")
  textColor   String @default("#1f2937")
  
  // Typography
  fontFamily  String @default("Inter") // Primary font
  fontHeading String @default("Inter") // Heading font
  fontSize    String @default("base") // text-sm, base, lg, xl
  
  // Theme & Template
  themeTemplate String @default("modern") // modern, classic, minimal, colorful
  customCSS   String? // Custom CSS for advanced users
  
  // Content Customization
  welcomeMessage String?
  termsOfService String?
  privacyPolicy String?
  aboutUs       String?
  
  // Gallery & Media
  galleryImages Json? // Array of image URLs
  socialMedia   Json? // Social media links {facebook, instagram, line, etc}
  
  // SEO & Meta
  metaTitle     String?
  metaDescription String?
  metaKeywords  String?
  
  // Language & Localization
  language      String @default("th") // th, en
  timeZone      String @default("Asia/Bangkok")
  currency      String @default("THB")
  
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  ownerId     String @unique
  owner       User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  services    Service[]
  staff       Staff[]
  bookings    Booking[]
  operatingHours OperatingHours[]
  blackoutDates BlackoutDate[]
  waitlist    Waitlist[]
  availabilitySettings AvailabilitySettings?
  holidays    Holiday[]
  subscription Subscription?

  @@map("businesses")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // minutes
  price       Decimal? @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  waitlist    Waitlist[]

  @@map("services")
}

model Staff {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  avatar    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings   Booking[]
  waitlist   Waitlist[]
  availability StaffAvailability[]

  @@map("staff")
}

model OperatingHours {
  id        String      @id @default(cuid())
  dayOfWeek Int         // 0 = Sunday, 1 = Monday, etc.
  openTime  String      // HH:MM format
  closeTime String      // HH:MM format
  isOpen    Boolean     @default(true)

  // Relationships
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, dayOfWeek])
  @@map("operating_hours")
}

model StaffAvailability {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isAvailable Boolean @default(true)

  // Relationships
  staffId   String
  staff     Staff @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([staffId, dayOfWeek, startTime])
  @@map("staff_availability")
}

model BlackoutDate {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  reason      String?
  isRecurring Boolean  @default(false)

  // Relationships
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@map("blackout_dates")
}

// Booking System
model Booking {
  id            String        @id @default(cuid())
  bookingNumber String        @unique
  type          BookingType   @default(TIME_SLOT)
  status        BookingStatus @default(CONFIRMED)
  bookingDate   DateTime      @db.Date
  bookingTime   String?       // HH:MM format for time slots
  queueNumber   Int?          // For queue-based bookings
  estimatedDuration Int?      // minutes
  actualStartTime DateTime?
  actualEndTime   DateTime?
  notes         String?
  customerName  String?       // For guest bookings
  customerPhone String?       // For guest bookings
  customerEmail String?       // For guest bookings
  isGuestBooking Boolean      @default(false) // Identify guest bookings
  guestLookupToken String?    @unique // Token for guest booking lookup
  cancellationReason String?
  cancellationFee Decimal?    @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  customerId  String?
  customer    User?     @relation(fields: [customerId], references: [id], onDelete: SetNull)
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staffId     String?
  staff       Staff?    @relation(fields: [staffId], references: [id], onDelete: SetNull)
  
  bookingNotifications BookingNotification[]
  notifications Notification[]

  @@map("bookings")
}

model BookingNotification {
  id        String           @id @default(cuid())
  type      NotificationType
  status    NotificationStatus @default(PENDING)
  sentAt    DateTime?
  error     String?
  createdAt DateTime         @default(now())

  // Relationships
  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_notifications")
}

// General Notification System
model Notification {
  id              String           @id @default(cuid())
  type            String           // BOOKING_CONFIRMATION, BOOKING_REMINDER, QUEUE_STATUS_UPDATE, etc.
  recipientType   String           // email, line, sms
  recipientAddress String          // email address, LINE user ID, or phone number
  status          NotificationStatus @default(PENDING)
  data            Json?            // Notification payload data
  sentAt          DateTime?
  error           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  senderId        String?
  sender          User?    @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  recipientId     String?
  recipient       User?    @relation("NotificationRecipient", fields: [recipientId], references: [id], onDelete: SetNull)
  bookingId       String?
  booking         Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

// Waitlist System
model Waitlist {
  id          String       @id @default(cuid())
  position    Int          // Position in waitlist
  status      WaitlistStatus @default(WAITING)
  bookingDate DateTime     @db.Date
  bookingTime String       // HH:MM format
  notes       String?
  leftAt      DateTime?    // When user left the waitlist
  promotedAt  DateTime?    // When promoted to actual booking
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relationships
  customerId  String
  customer    User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staffId     String?
  staff       Staff?   @relation(fields: [staffId], references: [id], onDelete: SetNull)
  
  @@map("waitlist")
}

// Availability Settings
model AvailabilitySettings {
  id                   String    @id @default(cuid())
  advanceBookingDays   Int       @default(30)
  sameDayBooking       Boolean   @default(true)
  bufferTimeMinutes    Int       @default(15)
  maxBookingsPerDay    Int       @default(50)
  allowWalkIn          Boolean   @default(true)
  requirePhone         Boolean   @default(false)
  autoConfirmBookings  Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relationships
  businessId String    @unique
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("availability_settings")
}

// Holiday Management
model Holiday {
  id          String    @id @default(cuid())
  name        String
  date        DateTime  @db.Date
  isRecurring Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@map("holidays")
}

// Subscription Management
model Subscription {
  id                String             @id @default(cuid())
  tier              SubscriptionTier   @default(FREE)
  status            SubscriptionStatus @default(INACTIVE)
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean           @default(false)
  trialStart        DateTime?
  trialEnd          DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Payment info
  stripeCustomerId     String?
  stripeSubscriptionId String? @unique
  stripePriceId        String?
  
  // Relationships
  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  payments   Payment[]
  invoices   Invoice[]

  @@map("subscriptions")
}

model Payment {
  id              String        @id @default(cuid())
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("THB")
  status          PaymentStatus @default(PENDING)
  paymentDate     DateTime?
  paymentMethod   String?
  stripePaymentId String?       @unique
  stripeInvoiceId String?       @unique
  stripeChargeId  String?       @unique
  invoiceUrl      String?
  receiptUrl      String?
  description     String?
  metadata        Json?         // Additional payment metadata
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relationships
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Invoice {
  id                    String        @id @default(cuid())
  subscriptionId        String
  invoiceNumber         String        @unique
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("THB")
  status                String        @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE, CANCELLED
  
  // Invoice details
  issueDate             DateTime      @default(now())
  dueDate               DateTime
  paidDate              DateTime?
  description           String?
  notes                 String?
  
  // Stripe integration
  stripeInvoiceId       String?       @unique
  hostedInvoiceUrl      String?
  invoicePdf            String?
  
  // Line items (stored as JSON for flexibility)
  lineItems             Json          // Array of invoice line items
  
  // Tax and totals
  subtotal              Decimal       @default(0) @db.Decimal(10, 2)
  taxAmount             Decimal       @default(0) @db.Decimal(10, 2)
  discount              Decimal       @default(0) @db.Decimal(10, 2)
  total                 Decimal       @db.Decimal(10, 2)
  
  // Metadata
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  
  // Relationships
  subscription          Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@map("invoices")
}

// Enums
enum UserRole {
  CUSTOMER
  BUSINESS_OWNER
  ADMIN
}

enum BookingType {
  TIME_SLOT
  QUEUE_NUMBER
}

enum BookingStatus {
  CONFIRMED
  CHECKED_IN
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum NotificationType {
  BOOKING_CONFIRMATION
  REMINDER_30MIN
  QUEUE_READY
  CANCELLATION
  RESCHEDULED
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

enum SubscriptionTier {
  FREE      // Free tier with limited features
  BASIC     // 300 THB
  PRO       // 600 THB
  ENTERPRISE // 1000 THB
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELLED
  INCOMPLETE
  TRIALING
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum WaitlistStatus {
  WAITING
  PROMOTED     // Promoted to actual booking
  CANCELLED    // User left waitlist
  EXPIRED      // Time slot passed
}
